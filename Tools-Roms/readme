ROMS related tools:

To compile tools: 
1) Simply type "make" 

! Dependecy list: Make.depend
! ===========================
 
 makedepf90 -   This is an open-source dependency generator. The exectuable
                should work across platforms, and hence is kept in repo as such.
                It is possible to install through package managers, e.g.:
                sudo apt install makedepf90
                A .tar file with the source code is available in the Tools-Roms
                folder for manual install if necessary.
                The program is able to detect cppflags, e.g. if you turn on WEC flag,
                be sure to run 'make depend' again, as now more files will depend
                on wec_frc.F module. 
                HOWEVER, it does not seem to be able to handle if-else with cppflags. 
                I found this with flux_frc in set_forces, where
                it had #if def BULK_FRC / # else (flux_frc), but then in Make.depend
                set_forces had no dependence on flux_frc.
                If compiled with -Wconfused then it will print warnings when confused.
                
                Source code: https://salsa.debian.org/science-team/makedepf90
                Man page: https://linux.die.net/man/1/makedepf90 
                (Note: cross_matrix is no longer used)

! NETCDF tools
! ============

 partit -	Separates single input files over domain into multiple input
 		files based on the MPI tiling based on the parameters you set
 		in param.h file.

 ncjoin -	Joins partitioned netcdf result files (.nc) into one file
 		for better viewing of results:
 		E.g.: with files result.0.nc result.1.nc
 		ncjoin -d result.*
 		Will prodcue result.nc file containing joined results.
 		the -d flag will delete the individual files, e.g. .0. and .1.                
 
! Code editing
! ============ 

 chkindent -    checks identing and alignment of CPP #directives; 

 mreplace -  	searches and renames objects in Fortran source codes.
              	Useful for speed editing multiple files if consistent name
              	changes are required simultaneously in many places in many
              	files.  Also known to be useful for speed editing labels in
              	LaTeX files where it is non-practical or too cumbersome to
              	do it manually by standard editing tools.


All the above are compile-once-use-forever, stand-alone, self-explanatory
programs -- just execute each of them without any arguments to see what
they are and for instructions how to use them.


# The following is old from Sasha, set up if you want it...
To compile: Simply type "make" ...
... then "make install". The executables
will be moved to ~/bin directory. The directory must pre-exist and
should be included in $PATH in ~/.cshrc or ~/.bashrc files.  
The installation path can be changed by editing Makefile. 
The compiler can be selected by chosing an appropriate Makedes.XXX file.  
There is no need for any external library beside the standard intrinsic functions.

