# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alFh'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

#####
# DPD additions
#####

# Original ifort install
# ----------------------
#. ~/intel/parallel_studio_xe_2020/bin/psxevars.sh intel64
#export PATH="~/intel/parallel_studio_xe_2020.0.088/bin:$PATH"
# Environmental variables related to Intel
#export IFC_ROOT=/home/devin/intel/compilers_and_libraries_2020.0.166/linux

#if (`uname -m` == x86_64) then
#        set IFC_ARCH_TYPE=intel64
#else
#        set IFC_ARCH_TYPE=ia32
#endif
#setenv PATH ${IFC_ROOT}/bin/${IFC_ARCH_TYPE}:${PATH}
#export PATH=/home/devin/intel/compilers_and_libraries_2020.0.166/linux/bin/intel64:$PATH
#setenv LD_LIBRARY_PATH ${IFC_ROOT}/compiler/lib/${IFC_ARCH_TYPE}
#export LD_LIBRARY_PATH=$IFC_ROOT/compiler/lib/intel64:$LD_LIBRARY_PATH
#setenv MANPATH ${IFC_ROOT}/man:${MANPATH}
#export MANPATH=$IFC_ROOT/man:$MANPATH

# New parallel studio install August 2020
# ---------------------------------------
export IFC_ROOT=/opt/intel/compilers_and_libraries_2020.2.254/linux
export PATH=$IFC_ROOT/bin/intel64:$PATH
export LD_LIBRARY_PATH=$IFC_ROOT/compiler/lib/intel64:$LD_LIBRARY_PATH
export MANPATH=$IFC_ROOT/man:$MANPATH


# Copied from maya cshrc
export PATH=/usr/local/bin:/usr/bin:/bin:/opt/bin:/opt/include:$PATH
export PATH=./:$PATH 
export MANPATH=/usr/local/man:/usr/share/man

export MPI_INC=/home/devin/mpich-install/include
export MPI_LIB=/home/devin/mpich-install/lib
 
export NETCDF_LIB=/usr/local/lib
export NETCDF_INC=/usr/local/include

export HDF5_LIB=/usr/lib/x86_64-linux-gnu/hdf5/serial
export HDF5_INC=/usr/include/hdf5/serial





# set MPI variables
export MPI_ROOT=/home/devin/mpich-install
export PATH=${MPI_ROOT}/bin:$PATH
export LD_LIBRARY_PATH=${MPI_ROOT}/lib:$LD_LIBRARY_PATH

export LD_LIBRARY_PATH=$NETCDF_LIB:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HDF5_LIB


#alias setONE "setenv OMP_NUM_THREADS 1"
#alias setTWO "setenv OMP_NUM_THREADS 2"
#alias setFOUR "setenv OMP_NUM_THREADS 4"
#alias setEIGHT "setenv OMP_NUM_THREADS 8"

# DPD set CPATH for .mod files (modules)
# for netcdf modfiles
export CPATH=/usr/local/include:$CPATH
export LIBRARY_PATH=/usr/local/include:$LIBRARY_PATH
# for mpi modules
export CPATH=${MPI_INC}:$CPATH

#for ncio
#export LIBRARY_PATH=/home/devin/repos_hp/ucla-roms/ncio-master/include:$LIBRARY_PATH
#export LD_LIBRARY_PATH=/home/devin/repos_hp/ucla-roms/ncio-master/lib:$LD_LIBRARY_PATH

export ROMS_ROOT=/home/devin/repos_hp/ucla-roms



####
#
####

alias hun='ssh -X ddevin@hun.atmos.ucla.edu'
alias maya='ssh -X ddevin@maya.atmos.ucla.edu'
#alias wse='ssh -X ddevin@169.232.145.183'
alias zulu='ssh -X ddevin@169.232.145.183'
#alias wse_path ddevin@169.232.145.183
alias cherokee='ssh -X ddevin@169.232.145.151'
alias comet='ssh -X ddevin@comet.sdsc.xsede.org'
alias ll='ls -lahF'
alias llt='ls -lhtF'
alias lt='ls -lth | head -20'

# source intal trace analyzer and collect enivronment variables
alias env_itac='source /opt/intel/impi/2019.8.254/intel64/bin/mpivars.sh; source /opt/intel/itac/2020.2.031/bin/itacvars.sh'
alias env_vtune='source /opt/intel/vtune_profiler/env/vars.sh'

# MATLAB
export PATH=$PATH:/usr/local/MATLAB/R2020b/bin


# New parallel studio install August 2020
# -> source must be @ end of .bashrc file
# ---------------------------------------
#source /opt/intel/parallel_studio_xe_2020/bin/psxevars.sh
# Rather use sections from psxevars.sh but only for compilers and vtune
# The if's are apparenlty important incase the file doesn't exist
#SCRIPTPATH=/opt/intel/parallel_studio_xe_2020.2.108
#ROOTPATH=/opt/intel
#INTEL_TARGET_ARCH="intel64"
#ITAC_PARAM=""

#while [ $# -gt 0 ]; do
#    arg="$1"
#    if [ -n "$arg" ]; then
#        case "$arg" in
#            ia32 )       INTEL_TARGET_ARCH="ia32"    ;;
#            intel64 )    INTEL_TARGET_ARCH="intel64" ;;
#            impi64 )     ITAC_PARAM="$arg"           ;;
#            * )          break                       ;;
#        esac
#    fi
#    shift
#done

#echo "DPD - Intel(R) (ifort & vtune) 2020 Update 2 for Linux*"

#if [[ -f "$SCRIPTPATH/compilers_and_libraries_2020/linux/bin/compilervars.sh" ]]; then
#    . "$SCRIPTPATH/compilers_and_libraries_2020/linux/bin/compilervars.sh" "$INTEL_TARGET_ARCH"
#fi

#if [[ -f "$SCRIPTPATH/vtune_profiler_2020/vtune-vars.sh" ]]; then
#    . "$SCRIPTPATH/vtune_profiler_2020/vtune-vars.sh" quiet
#fi

# still had mpirun pointing to intel mpirun so not going to use this process for now.
