2021/07 - DevinD

This readme looks at how flux divergence is calculated for u, v and rho points.

              horizontal grid:

          u     r     u     r     u
        (1,2) (1,2) (2,2) (2,2) (3,2)

          x     v     x     v     x
              (1,2)       (2,2)

          u     r     u     r     u
        (1,1) (1,1) (2,1) (2,1) (3,1)

          x     v     x     v     x
              (1,1)       (2,1)


AREA OF CELLS:

    AREA = len_x * len_y     therefore 1/AREA = 1/len_x * 1/len_y
    
    in roms we have rho-point variable for pm(i,j) = 1/len_x  and  pn(i,j) = 1/len_y
    
    Hence 1/A can be calculated directly or by averaging:
      rho-cell: 1/A = pm(i,j) * pn(i,j)
        u-cell: 1/A = 0.5*( pm(i-1,j)+pm(i,j) ) * 0.5 * ( pn(i-1,j)*pn(i,j) )
        v-cell: 1/A = 0.5*( pm(i,j-1)+pm(i,j) ) * 0.5 * ( pn(i,j-1)*pn(i,j) )        

RHO-POINT FLUXES:

            rho-cell:                    

          x   +RFy    x          where RFx is the flux through u-points (u-faces) - RFx(xi_u, eta_rho)
              (1,2)                    RFy is the flux through v-points (v-faces) - RFy(xi_rho, eta_v)

        -RFx    r   +RFx               RFx(i,j) uses FlxU(i,j) both at u-points
        (1,1) (1,1) (2,1)              RFy(i,j) uses FlxV(i,j) both at v-points

          x   -RFy    x         div( r(i,j) ) = - pm(i,j) * pn(i,j)     
              (1,1)                            * ( RFx(i+1,j  ) - RFx(i,j)          |->  +ve out of cell
                                                   RFy(i  ,j+1) - RFy(i,j) )      ->|    -ve in  to cell

  
       Interpolation scheme (4th order centred):  
     
         T at RFx(i,j) = [ a T(i-2,j) + b T(i-1,j) + c T(i,j) + d T(i+1,j) ] * FlxU(i,j)
       
         T at RFy(i,j) = [ a T(i,j-2) + b T(i,j-1) + c T(i,j) + d T(i,j+1) ] * FlxV(i,j)
       
       Loop ranges:
       
         Incl. boundary:  j=jstrR,jendR
                            i=istrR,iendR
                            
         Excl. boundary:  j=jstr,jend
                            i=istr,iend
                                                   
U-POINT FLUXES:

            rho-cell:                  

          v   +UFy    v          where UFx is the flux through r-points (u-faces) - UFx(xi_rho, eta_rho)  
        (1,2) (2,2) (2,2)              UFy is the flux BETWEEN v-points           - UFy(xi_u,   eta_v  )

        -UFx    u   +UFx    u          UFx(i,j) uses 0.5*(FlxU(i  ,j)+FlxU(i+1,j))    [xi_u 2 xi_rho]  u-UFx-u
        (1,1) (2,1) (2,1) (3,1)        UFy(i,j) uses 0.5*(FlxV(i-1,j)+FlxV(i  ,j))    [xi_rho 2 xi_u]  v-UFy-v

          v   -UFy    v         div( u(i,j) ) = - 0.25*( ( pm(i-1,j)+pm(i,j) ) * ( pn(i-1,j)*pn(i,j) ) )   
        (1,1) (2,1) (2,1)                      * ( UFx(i,j  ) - UFx(i-1,j)
                                                   UFy(i,j+1) - UFy(i  ,j) )              
              
     
       Interpolation scheme (4th order centred):  
     
         u at UFx(i,j) = [ a u(i-1,j) + b u(i,j)   + c u(i+1,j) + d u(i+2,j) ]*0.5*( FlxU(i,j) + FlxU(i+1,j))
       
         u at UFy(i,j) = [ a u(i,j-2) + b u(i,j-1) + c u(i,j)   + d u(i,j+1) ]*0.5*( FlxV(i-1,j) + FlxV(i,j))
         
       Loop ranges:
       
         Incl. boundary:  j=jstrR,jendR
                            i=istr,iendR
                            
         Excl. boundary:  j=jstr,jend
                            i=istrU,iend
       
       
V-POINT FLUXES:

            rho-cell:                  

     r    u   +VFy    u     r    where VFx is the flux BETWEEN u-points (u-faces) - VFx(xi_u,   eta_v  )  
        (2,2) (2,2) (3,2) (3,2)        VFy is the flux through r-points           - VFy(xi_rho, eta_rho)

     v  -VFx    v   +VFx    v          VFx(i,j) uses 0.5*(FlxU(i,j-1)+FlxU(i,j  ))  [eta_rho 2 eta_v]
        (2,2) (2,2) (3,2) (3,2)        VFy(i,j) uses 0.5*(FlxV(i,j  )+FlxV(i,j+1))  [eta_v 2 eta_rho]

     r    u   -VFy    u     r   div( v(i,j) ) = - 0.25*( ( pm(i,j-1)+pm(i,j) ) * 0.5 * ( pn(i,j-1)*pn(i,j) )
        (1,1) (2,1) (3,1) (3,1)                * ( VFx(i+1,j) - VFx(i,j  )
                                                   VFy(i  ,j) - VFy(i,j-1) )              
              
     
       Interpolation scheme (4th order centred):  
     
         v at VFx(i,j) = [ a v(i-2,j) + b v(i-1,j) + c v(i,j)   + d v(i+1,j) ]*0.5*( FlxU(i,j) + FlxU(i,j-1))
       
         v at VFy(i,j) = [ a v(i,j-1) + b v(i,j)   + c v(i,j+1) + d v(i,j+2) ]*0.5*( FlxV(i,j) + FlxV(i,j+1))
         
       Loop ranges:
       
         Incl. boundary:  j=jstr,jendR
                            i=istrR,iendR
                            
         Excl. boundary:  j=jstrV,jend
                            i=istr,iend
     
     
     
     
                                            
               

