Xavier,

It seems to me that found a reason for loss of synchronization
of the code in Open MP mode, and I have a remedy: it looks like
it is either due to violation of Open MP standard by us or Intel
compiler mishandls somehow communication between the threads 
using a shared scalar variable (in our case it is "synchro_flag")
which is assigned in one routine and used as input in another.
I read the new, 2005 version of Open MP specification for Fortran
and C++ (available from openmp.org) and tried to play with FLUSH
and ATOMIC directives, but with no lack.

Then I decided to privatize it --- the most straightforwars solution
since after that it does not matter what Open MP standard and
implementation says about it... and I was able to run two jobs
straight for the whole week without any crash.






To privatize synchro_flag you must:


1. Edit file "scalars.h":

       1a: find declaration of synchro_flag and its placement
           in common block (which is shared among the threads)
           and delete it there. 
       1b: introduce declaration "logical synchro_flag" and 
           its placement AT THE END common block /priv_scalars/
           (this is the common block which has THREADPRIVATE
           directive).

2. Edit file "init_scalars.F" and delete line

               synchro_flag=.true.

   in this file (since init_scalars is called before creation
   of parallel region it is executed only by master thread, on 
   variables in /priv_scalars/ on child threads can not be
   initialized here).


3. Edit "main.F" and
       3a:  find line 

                iic=0

            and introduce initialization within routine
            "roms_init", just after time stepping indices,

                synchro_flag=.true 

       3b: find line 

               if (synchro_flag) then
 
           and remove directives C$OMP MASTER .... C$OMP END MASTER
           enclosing line
    
                 synchro_flag=.false.

           after that the whole block of code should look like

                if (synchro_flag) then
                  synchro_flag=.false.
            C$OMP MASTER
                  call get_forces
            C$OMP END MASTER
            C$OMP BARRIER
                  if (may_day_flag.ne.0) goto 99  !-->  EXIT
                endif

4. Execute command 

            grep synchro_flag *.F | grep true

   and edit every file containing statement synchro_flag=.true.
   (except main.F which you are already edited) which are basically
   several get_something.F:

          get_all_bry.F
          get_smflux.F
          get_srflux.F
          get_ssh.F
          get_stflux.F
          get_tclima.F
          get_uclima.F
          get_wwave.F

   and edit them one-by-one to 

       4a. find line which looks like

              if (ZEROTH_TILE .and. cff1.lt.dt) synchro_flag=.true.

           and convert it into

              if (cff1.lt.dt) synchro_flag=.true.


       4b. above that segment of code you will see a paragraph of
           commentary, which in the middle contains phrase saying


           "set synchro_flag to signal ... (master thread only)."

           delete words "(master thread only)" because now every
           thread sets its own synchro flag.

