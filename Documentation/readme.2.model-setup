
ROMS MODEL SETUP & CONFIGURATION
--------------------------------

Below are a few intructions that should assist in configuring the roms
executable to work for your simulation of interest:
(Note, these intructions will assist users of the old roms code, but
are likely insufficient for first time roms users)

Running new simulations:

    When running a new simulation (i.e. new input files / grid ), it is best to do a very
    short run first. E.g. only 5 time steps, with result outputting at everytime step, this
    should make iterating to get the model to run properly go faster, rather than waiting
    for your first desired output only to realize there's a netcdf output issue.
    
    Using comet (cluster): Comet  has 2 debug nodes per user that gives you instant access 
    to test if your code runs as you get setup (without long waits to run). Strongly encouraged.
    See Documentation/machine-specific/Job_submission_scrips/run_script_comet_debug_nodes.lsf
    for an example of a job submission script on the 2 debug nodes.

Forcing file units:

    You will need to edit the units of your forcing file to match the units
    stated at the top of:
    bulk_frc.F -> for BULK_FRC simulations (BULK_FLUX of old is now BULK_FRC)
    flux_frc.F -> for direct flux simulations (still default)
     
    For the names of the variable and variable time, either change the forcing 
    files to match: the variable name, the variable's time name, the value to 
    the correct units, and the name of the units. 
    Alternatively, you can change the variable name and time name in bulk_frc.F
    or flux_frc.F if you prefer (ensure character(len=?) matches length of new name. 
    Note, the units must be changed to match code.
    
    You can use scripts to edit netcdf files, or below is a command line example 
    of how to do it if you prefer:
    - change name:  ncrename -v prec,rain sample_prec.nc (changes prec -> rain)
    - change value: ncap2 -s 'rain=2*rain' sample_prec.nc (e.g. multiply rain 
      variable by 2)
    - change units: ncatted -a units,rain,m,c,'cm/day' sample_prec.nc (changes 
      name of units of 'rain' to 'cm/day')

roms.in:

    See Examples/Tracers_passive/USWC_sample.in as a template. 
    Note, we now use one root name, e.g. 'pacific', stored in 
    variable 'output_root_name' for the output file names. 
    So the history file will be pacific_his.*.nc,
    and the averages file will be pacific_avg.*.nc


cppdefs.h:

    We have removed some cppflags, 'grep' search the code to see if they still
    exist, or ask someone who might know :).
    
param.h:

    Set your domain decomposition here, e.g. LLm, MMm, NP_XI, NP_ETA.
    Set number of tracers here.    

Passive tracers:

    The setup for passive tracers is done in the module tracers.F. There are some 
    instructions at the top of the file in the user inputs section. You need to create
    an index variable there for each tracer you want beyond 'islt'. You will then need 
    to insert all your details about your tracers in tracers_defs.h,  
    there are instructions in the files.
    Set number of tracers 'NT' in param.h as before.
    I would suggest starting with no tracers or just 1 or 2 to ensure that you can get 
    it working, and then finally set it up with all of your tracers.
    Selection of tracers for outputting is also done in tracers_defs.h.
    No longer need PASSIVE_TRACER flag for this to work.
    
tides:

    Set the number of tidal contributions you are using in tides.F variable Ntides. 
    
Averages:

    Only compile roms with AVERAGES flag if you do in fact need averages. The reason for
    this is that AVERAGES creates a second array for every variable in your model, hence
    doubles your memory requirement. Better to remove AVERAGES flag if not using this.
    
    Furthermore, if you used the AVERAGES flag but you don't need them, and your 'NTSAVG'
    (number to start averaging) in your roms.in file is at any point equal to your timestep 'iic',
    you will start computing averages at that point, which is expensive and wasted computing.
    
Diagnostics:

    Diagnostics are calculated using the diagnostics module of src/diagnostics.F.
    To use diagnostics you need the CPPFLAG 'DIAGNOSTICS'.
    You then need to edit the user input section at the top of diagnostics.F and then compile ROMS.
    Select the tracer variables for which you want diagnostics in tracers_defs.h in wrt_t_diag array.
    See the top of diagnostics.F for a more detailed description of the available diagnostics.
    
Netcdf output compression:

    The new roms code now uses netcdf-4 file outputting (previously netcdf-3). This allows
    for compression of output files. After testing, it was decided to set the default
    compression level as "deflate_level=1" in read_write.F. There was not much difference
    between d1 and d5 compression, hence d1 was chosen.
    For a tile of only ocean (no land), we found a 30% reduction in output file sizes.
    For a tile of mostly land, a huge reduction in file size can be found (99% if almost
    all land!).
    On maya this actually reduced the run time by a few percent, as it reduced to the amount
    of data written to disk, which is a cost on maya.
    On comet the compression increased run time by a few percent. Note that the output
    frequency was quite high to test the impact of compression, so for normal simulation
    output rates it is unlikely to make an impact.
    
    If you are outputting at every time-step for some reason, you may want to remove compression
    by setting "deflate_level=0" in read_write.F.
    The code currently uses default 'chunking' of netcdf variables. Depending on your simulation
    it is possible that compression might not work nicely. It is recommended you do a small test,
    e.g. 50 steps outputting every 25 steps (2 outputs), and confirm that the compression does
    not cost a lot of time, and that the output files are considerably smaller (worth the cost).
    
    ncjoin has been modified to create compressed files as well. On maya we found:
    no compression = 316s execution time -> 21GB
    d1 compression = 808s execution time ->  8GB
    The time penalty is considerable but the file size savings is impressive.
    Again, if you are finding ncjoin too slow, change to "deflate_level=0" in Tools-Roms/ncjoin.F.        

Surface flux outputting:
    
    It is possible to output the resulting surface flux sustr, svstr, etc. The 
    output frequency is controlled at the top of surf_flux.F, not the roms.in file.
    You need to activate the following cppflag: SURF_FLUX_OUTPUT_HIS 
    It will produce its own output file separate from the _his.F file.
    The averages (sustr_avg, etc) are activated using the cppflags: 
    SURF_FLUX_OUTPUT_AVG && AVERAGES
    The output will be placed in the normal _avg.F file.
    The T/F to print the averages is controlled in surf_flux.F

Misc.:

    The machine compilation file Makedefs/Makedefs.IntelEM64T is now Makedefs.inc.
    For information on generating online child boundary files, see:
    - Documentation/readme-specifics/README.bry_child_extract_202104


