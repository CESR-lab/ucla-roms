
      ! ****************************************************************
      ! User inputs

      ! note: choice of bgc tracers to output is still selected in tracers.opt.

      logical,parameter :: wrt_his           = .true.             ! t/f to write module history file
      real,parameter    :: output_period_his = 30*24*60*60        ! output period in seconds
      integer,parameter :: nrpf_his          = 2                  ! total recs per file
      
      logical,parameter :: wrt_avg           = .true.             ! t/f to write module averages file
      real,parameter    :: output_period_avg = 30*24*60*60        ! output averaging period in seconds
      integer,parameter :: nrpf_avg          = 1                  ! total recs per file

      logical,parameter :: wrt_his_dia           = .false.        ! t/f to write module history file
      real,parameter    :: output_period_his_dia = 2635200  ! output period in seconds
      integer,parameter :: nrpf_his_dia          = 13             ! total recs per file

      logical,parameter :: wrt_avg_dia           = .true.         ! t/f to write module history file
      real,parameter    :: output_period_avg_dia = 30*24*60*60    ! output period in seconds
      integer,parameter :: nrpf_avg_dia          = 1              ! total recs per file

      integer, parameter :: nbgc_flx = 2                   ! number of surface bgc flux forcings
#ifdef PCO2AIR_FORCING
     &                                +1
#endif
#if defined DAILYPAR_PHOTOINHIBITION || defined DAILYPAR_BEC
     &                                +1
#endif  
      
      integer :: interp_frc  = 0                           ! interpolate forcing from coarser input grid (=1) or not (=0)

      type (ncforce) :: nc_dust        = ncforce(vname='dust', tname='dust_time' )  ! dust forcing
      type (ncforce) :: nc_iron        = ncforce(vname='iron', tname='iron_time' )  ! iron forcing      
#ifdef PCO2AIR_FORCING
      type (ncforce) :: nc_pco2air     = ncforce(vname='pco2_air',   tname='pco2_time' )
#ifdef MARBL      
      type (ncforce) :: nc_pco2air_alt = ncforce(vname='pco2_air_alt',   tname='pco2_time' )
#endif      
#endif            
#if defined DAILYPAR_PHOTOINHIBITION || defined DAILYPAR_BEC
      type (ncforce) :: nc_swrad_avg   = ncforce(vname='swrad_davg', tname='srf_davg_time' )
#endif
#ifdef NOX_FORCING
      type (ncforce) :: nc_nox        = ncforce(vname='nox', tname='nox_time' )
#endif
#ifdef NHY_FORCING
      type (ncforce) :: nc_nhy        = ncforce(vname='nhy', tname='nhy_time' )
#endif

!#include "bgc_tracers.h"
!#include "bgc_bio_diag.h"

      ! End of user inputs
      ! *************************************************************
