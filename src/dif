11a12
>       use sponge_tune
31a33
> 
60a63
>       use ocean_vars
71a75
>       if(mynode==0) print *,'may_day_flag: ',may_day_flag
73,75c77,81
<       if (mynode==0) print *,'mdf: ',may_day_flag
< C$OMP BARRIER                            ! and broadcasted by "diag"
< C$OMP MASTER                             ! [which sets diag_sync=T to
---
>       if(mynode==0) print *,'may_day_flag: ',may_day_flag
>       if (may_day_flag /=0) 
>      &  call wrt_his_ocean_vars(.true.)
>                                          ! and broadcasted by "diag"
>                                          ! [which sets diag_sync=T to
77c83
< C$OMP END MASTER                         ! is in uniform state]. This
---
>                                          ! is in uniform state]. This
81,82c87,88
< 
<       subroutine roms_init
---
> !----------------------------------------------------------------------
>       subroutine roms_init ![
84d89
< #ifdef NHMG
86,87d90
< #endif
<       use dimensions
91a95
>       use sponge_tune
95,96c99
<       integer trd, tile, my_first, my_last, range
< C$    integer omp_get_thread_num, omp_get_num_threads
---
>       integer trd
99,100d101
< C$    numthreads=omp_get_num_threads()
< C$    trd=omp_get_thread_num()
103,115c104
<       if (mod(NSUB_X*NSUB_E,numthreads) /= 0) then
< C$OMP MASTER
<         mpi_master_only write(*,'(/3(1x,A,I3),A/)')
<      &    '### ERROR: Wrong choice of numthreads =', numthreads,
< c        endif
<      &         'while NSUB_X =', NSUB_X, 'NSUB_E =', NSUB_E,'.'
<         may_day_flag=8
< C$OMP END MASTER
< C$OMP BARRIER
<         goto 99 !-->  EXIT
<       endif
<                                        ! NOTE: This code is written
<       iic=0  ; kstp=1 ; knew=1         ! under an assumption that all
---
>       iic=0  ; kstp=1 ; knew=1       
117,118c106,107
<       iif=1  ; nstp=1                  ! the scalar variables assigned
<       nnew=1 ; nrhs=1                  ! on the left here are placed
---
>       iif=1  ; nstp=1                
>       nnew=1 ; nrhs=1                
120,132c109,113
<       synchro_flag=.true.              ! into a THREADPRIVATE common
<       diag_sync=.false.                ! block so each thread must
<       priv_count=0                     ! assign them to same values.
< 
<       range=(NSUB_X*NSUB_E+numthreads-1)/numthreads
<       my_first=trd*range
<       my_last=min(my_first + range-1, NSUB_X*NSUB_E-1)
< #define my_tile_range my_first,my_last
< 
<       do tile=my_tile_range              ! Initialize or "first touch"
<         call init_arrays(tile,my_first)  ! global arrays (most of them
<       enddo                              ! are just set to to zero).
< C$OMP BARRIER
---
>       synchro_flag=.true.             
>       diag_sync=.false.               
>       priv_count=0                    
> 
>       call init_arrays                 ! global arrays (most of them)
136a118,120
> #ifdef SPONGE_TUNE
>       call init_sponge_tune
> #endif
138,147d121
< c--#define CR
< CR      write(*,*) '-11' MYID
< 
< 
<       !! move the ana_grid call to within get_grid
< #ifdef ANA_GRID
<       do tile=my_tile_range       
<         call ana_grid(tile)              ! grid and model bathymetry
<       enddo                   
< #else
149,150d122
< #endif
<       if (may_day_flag /= 0) goto 99 !-->  EXIT
152,161c124,127
<       do tile=my_tile_range            ! Compute various metric terms
<         call setup_grid1(tile)         ! and their combinations.
<       enddo
< C$OMP BARRIER
< CR      write(*,*) '-10' MYID
<       do tile=my_tile_range
<         call setup_grid2(tile)
<       enddo
< C$OMP BARRIER
< CR      write(*,*) '-9' MYID
---
>       if (may_day_flag /= 0) goto 99 
> 
>       call setup_grid1(0)         ! 
>       call setup_grid2(0)
164,170c130
< C$OMP MASTER                           ! Setup vertical stretching
<       call set_scoord                  ! functions for S-coordinate
< C$OMP END MASTER                       ! system
< C$OMP BARRIER
<       if (may_day_flag /= 0) goto 99
< #endif
< CR      write(*,*) ' -8' MYID
---
>       call set_scoord             ! functions for S-coordinate
172,178c132
< #if (defined UV_VIS2 && defined VIS_GRID) ||\
<     (defined TS_DIF2 && defined DIF_GRID)
<       do tile=my_tile_range            ! Rescale horizontal mixing
<         call visc_rescale(tile)        ! coefficients according to
<       enddo                            ! local grid size.
< C$OMP BARRIER
< CR      write(*,*) ' -7' MYID
---
>       if (may_day_flag /= 0) goto 99
182,183c136
<       do tile=my_tile_range            ! Create three-dimensional
<         call set_depth(tile)           ! S-coordinate system, which
---
>       call set_depth(0)           ! S-coordinate system, which
185c138
<         call swr_frac(tile)            ! may be needed by ana_init.
---
>       call swr_frac(0)            ! may be needed by ana_init.
187,193c140
<       enddo
< C$OMP BARRIER                          ! Here it is assumed that free
<       do tile=my_tile_range            ! surface zeta is at rest state,
<         call grid_stiffness(tile)      ! zeta=0). Also find and report
<       enddo                            ! extremal values of topographic
< C$OMP BARRIER                          ! slope parameters "rx0", "rx1".
< CR      write(*,*) ' -6' MYID
---
>       call grid_stiffness(0)      ! zeta=0). Also find and report
197d143
<       ! pH is initialized to 0 in ecosys_init
202,210c148,150
<       do tile=my_tile_range            ! Set initial conditions for
<         call set_forces(tile)          ! model prognostic variables,
<       enddo                            ! either analytically or read
< C$OMP BARRIER                          ! from netCDF file.  Note that
<       do tile=my_tile_range            ! Set initial conditions for
<         call ana_init(tile)            ! may require surface forcing
<       enddo                            ! either analytically or read
< C$OMP BARRIER                          ! so call forces first.
<       if (nrrec > 0) then              ! Also note that ana_init may
---
>       call set_forces(0)    ! surface forcing may be neccesary
>       call ana_init(0)      ! for ana_init
>       if (nrrec > 0) then   
213c153
< C$OMP MASTER                           ! setup environmental variables
---
>                                        ! setup environmental variables
215,216c155,156
< C$OMP END MASTER                       ! forcing), call it first, even
< C$OMP BARRIER                          ! in the case of restart run.
---
>                                        ! forcing), call it first, even
>                                        ! in the case of restart run.
218,221c158
<         do tile=my_tile_range
<           call set_depth(tile)
<         enddo
< C$OMP BARRIER
---
>         call set_depth(0)
224d160
< C$OMP MASTER
226d161
< C$OMP END MASTER
230c165
< C$OMP BARRIER
---
> 
232c167
< CR      write(*,*) ' -5' MYID
---
> 
238,241c173,175
<       do tile=my_tile_range       ! recompute three-dimensional S-
<         call set_depth(tile)      ! coordinate system: at this moment
<       enddo                       ! free surface has non-zero status
< C$OMP BARRIER
---
>                                   ! recompute three-dimensional S-
>         call set_depth(0)         ! coordinate system: at this moment
>                                   ! free surface has non-zero status
247c181
< #ifdef NHMG
---
> # ifdef NHMG
251,258c185
< #endif
< 
< CR      write(*,*)  ' -4' MYID
<       do tile=my_tile_range
<         call set_HUV(tile)
<       enddo
< C$OMP BARRIER
< CR      write(*,*)  ' -3' MYID
---
> # endif
260,266c187,189
<       do tile=my_tile_range
<         call omega(tile)
<         call rho_eos(tile)
<       enddo
< C$OMP BARRIER
< CR      write(*,*)  ' -2' MYID
< #endif
---
>       call set_HUV(0)
>       call omega(0)
>       call rho_eos(0)
268,291c191,196
< ! Set up climatological environment: Set nudging coefficient for
< !==== == ============== ============ sea-surface hight and tracer
< ! climatology; create analytical tracer and sea-surface hight
< ! climatology fields (if applicable); set bottom sediment grain
< ! size [m] and density [kg/m^3] used for bottom boundary layer
< ! formulation;
< 
< #if defined SPONGE || defined TCLIMATOLOGY \
<   || (defined SG_BBL96 && defined ANA_BSEDIM)\
<   || (defined TCLIMATOLOGY && defined ANA_TCLIMA)\
<   || defined ANA_SSH
< 
<       do tile=my_tile_range
< # if defined SPONGE || defined TCLIMATOLOGY
<         call set_nudgcof(tile)
< # endif
< # if defined TCLIMATOLOGY && defined ANA_TCLIMA && defined SOLVE3D
<         call ana_tclima(tile)
< # endif
< # ifdef ANA_SSH
<         call ana_ssh(tile)
< # endif
< # if defined SG_BBL96 && defined ANA_BSEDIM
<         call ana_bsedim(tile)
---
> # if defined ANA_VMIX
>       call ana_vmix(0)
> # elif defined LMD_MIXING
>       call lmd_vmix(0)
> # elif defined BVF_MIXING
>       call bvf_mix(0)
293,302d197
<       enddo
< C$OMP BARRIER
< #endif
< CR      write(*,*) ' -1' MYID
< 
< ! Read initial input data for forcing fields; tracer and sea surface
< ! climatology; bottom sediment grain size and density (if applicable)
< ! from input netCDF files.  Note that CPP-logic here is mutually
< ! exclusive with respect to calls ana_tclima, ana_ssh, and ana_bsedim
< ! just above.
304c199
< !     call set_global_ij_SW_NE_corners
---
> #endif
307,309c202,206
< C$OMP MASTER
< #ifdef ANA_GRID
<       call wrt_ana_grid
---
> #if defined SPONGE || ANA_SSH 
>       call set_nudgcof(0)
> # ifdef ANA_SSH
>       call ana_ssh(0)
> # endif
311,313d207
< !      if (ldefhis .and. wrthis(indxTime)) call wrt_his
< C$OMP END MASTER
< C$OMP BARRIER
315,316d208
< 
< CR      write(*,*) '  0' MYID
319d210
< C$OMP MASTER
322d212
< C$OMP END MASTER
325,337c215,217
<       end
< 
< 
< !      *****    *********    ******   *******    *********
< !    ***   ***  *  ***  *   **  ***   ***   ***  *  ***  *
< !    ***           ***     **   ***   ***   ***     ***
< !      *****       ***    ***   ***   ***   **      ***
< !          ***     ***    *********   ******        ***
< !    ***   ***     ***    ***   ***   ***  **       ***
< !      *****       ***    ***   ***   ***   ***     ***
< 
< 
<       subroutine roms_step
---
>       end subroutine roms_init !]
> !----------------------------------------------------------------------
>       subroutine roms_step ![
353,358d232
<       integer trd, tile, my_first, my_last, range
< 
<       trd=proc(2)
<       range=(NSUB_X*NSUB_E+numthreads-1)/numthreads
<       my_first=trd*range
<       my_last=min(my_first + range-1, NSUB_X*NSUB_E-1)
388,395c262
<       do tile=my_tile_range            ! interpolate forcing
<         call set_forces(tile)          ! data to model time and
< # if defined TIDES
<         call set_tides(tile)           ! compute surface fluxes.
< # endif
<        !!! move these to the end of the time-step and initialization
<         call    rho_eos(tile)
<         call    set_HUV(tile)
---
>       call set_forces(0)    
397,416c264
<         call       diag(tile)
<       enddo
< C$OMP BARRIER
< 
< # ifdef WEC
<       call  wec_forces
< # endif
< 
<        !!! move these to the end of the time-step and initialization
<       do tile=my_tile_range
<         call omega(tile)
< # if defined ANA_VMIX
<         call ana_vmix(tile)
< # elif defined LMD_MIXING
<         call lmd_vmix(tile)
< # elif defined BVF_MIXING
<         call bvf_mix(tile)
< # endif
<       enddo
< C$OMP BARRIER
---
>       call diag(0)
419,422c267,270
<       do tile=my_tile_range
<         call     prsgrd(tile)
<         call pre_step3d(tile)  ! u is m/s here
<       enddo
---
> 
>       ! Predictor step
>       call prsgrd(0)
>       call pre_step3d(0)  ! u is m/s here
426,429c274
<       do tile=my_tile_range
<         call set_HUV1(tile)
<       enddo
< C$OMP BARRIER
---
>       call set_HUV1(0)
433,437c278,279
<       do tile=my_tile_range
<         call omega(tile)
<         call rho_eos(tile)
<       enddo
< C$OMP BARRIER
---
>       call omega(0)
>       call rho_eos(0)
440,442c282,283
<       do tile=my_tile_range
<         call     prsgrd(tile)
<         call step3d_uv1(tile)  ! update u/v(nnew) with dt*ru/rv
---
>       call     prsgrd(0)
>       call step3d_uv1(0)     ! update u/v(nnew) with dt*ru/rv
450c291
<            call visc3d(tile)
---
>            call visc3d(0)
453,454d293
<       enddo
< C$OMP BARRIER
475a315,317
> #ifdef BIOLOGY_BEC2
>       call wrt_bgc
> #endif
482,488c324,326
< #define FORW_BAK
< #ifdef FORW_BAK
<         kstp=knew                      ! This might look a bit silly,
<         knew=kstp+1                    ! because both branches of this
<         if (knew > 4) knew=1           ! "if" statement are identical.
<         if (mod(knew,2) == 0) then     ! Nevertheless, it makes sense,
<           do tile=my_tile_range        ! since mpc will reverse one of
---
>         kstp=knew                
>         knew=kstp+1               
>         if (knew > 4) knew=1       
490c328
<             call set_forces(tile)      ! these loops to make zig-zag
---
>         call set_forces(0)
492,519c330,331
<             call     step2d(tile)      ! tile-processing sequence.
<           enddo
< C$OMP BARRIER
<         else
<           do tile=my_tile_range
< # ifndef SOLVE3D
<             call set_forces(tile)
< # endif
<             call     step2d(tile)
<           enddo
< C$OMP BARRIER
<         endif
< #else
<         kstp=knew
<         knew=3
<         do tile=my_tile_range
< # ifndef SOLVE3D
<           call set_forces(tile)
< # endif
<           call     step2d(tile)
<         enddo
< C$OMP BARRIER
<         knew=3-kstp
<         do tile=my_tile_range
<            call step2d(tile)
<         enddo
< C$OMP BARRIER
< #endif
---
>         call step2d(0)  
> 
523,529c335,337
<       do tile=my_tile_range              ! Continue solution of
<         call step3d_uv2(tile)            ! the three-dimensional
<       enddo                              ! equations: finalize
< C$OMP BARRIER                            ! time step for momenta
<       do tile=my_tile_range              ! and tracers.
<         call omega(tile)
<         call step3d_t (tile)
---
>       call step3d_uv2(0)
>       call omega(0)
>       call step3d_t(0)
531,537c339,345
< !       if (split_bc) then
< !         call t3dmix(t_slow,diff2_slow)
< !         call t3dmix(t_fast,diff2_fast)
< !       else
< !         call t3dmix(t,diff2)
<           call t3dmix(tile)
< !       endif
---
> !     if (split_bc) then
> !       call t3dmix(t_slow,diff2_slow)
> !       call t3dmix(t_fast,diff2_fast)
> !     else
> !       call t3dmix(t,diff2)
>         call t3dmix(0)
> !     endif
539d346
<       enddo
540a348,358
>      !! finalize time-step all variables (JM)
>       call rho_eos(0)
>       call set_HUV(0)
>       call omega(0)
> # if defined ANA_VMIX
>       call ana_vmix(0)
> # elif defined LMD_MIXING
>       call lmd_vmix(0)
> # elif defined BVF_MIXING
>       call bvf_mix(0)
> # endif
542d359
< C$OMP BARRIER
550d366
< 
552c368
<       end
---
>       end subroutine roms_step !]
