# Definitions for Intel ifc FORTRAN compiler on Linux
# =========== === ===== === ======= ======== == =====

.SUFFIXES: .o .f .F

.F.o:
	$(CPP) -P $(CPPFLAGS) $*.F | mpc > $*.f
	$(CFT) -c $(FFLAGS) $*.f -o $*.o
#/bin/rm -f $*.f
.F.f:
	$(CPP) -P $(CPPFLAGS) $*.F | mpc > $*.f
.f.o:
	$(CFT) -c $(FFLAGS) $*.f -o $*.o
.F:
	$(CFT) -o $@ $(FFLAGS) $(LDFLAGS) $<
.f:
	$(CFT) -o $@ $(FFLAGS) $(LDFLAGS) $<
.o:
	$(CFT) -o $@ $(FFLAGS) $(LDFLAGS) $<


#
# C-preprocessor from Intel compiler package. Note: in this case
# __IFC is a pre-defined macro, so there is no need to include it
# into CPPFLAGS.
#
#     CPP = fpp

      CPP = /lib/cpp -traditional
 CPPFLAGS = -D__IFC


# NOTE: The actual Intel compiler name is either "ifc" (versions 5.x,
# 6.x or 7.x), or "ifort" (starting with version 8.0; name "ifc" is
# still accepted, but causes warning messages).   To make this setup
# universal and silent, soft links are added to Intel compiler bin
# directory with "f90" pointing to either "ifc" or "ifort" whichever
# is more appropriate. 
#
# Compiler settings:  -fpp2 is required only if -openmp is present.
# Not having -fpp2 here just causes compiler warning (-fpp is set to
# level 2 by -openmp), but other than that has no effect. Options
# -tppX -axY -xY activates specific optimizations
#
#              -tpp6 -axK -xK  for Pentium III
#              -tpp7 -axW -xW  for Pentium 4/Xeon  (ifc 7.1 and less)
#              -tpp7 -axN -xN                          (ifort 8.0)
#              -tpp7 -axP -xP  for Pentium 4/Prescott CPU (ifort 8.0)
#
# which allows the use of specialized instructions, hence affects
# portability of executable file. (Generally -axY acts like a "soft"
# flag --- generate code using instructions for specific CPUs up to
# level Y (Intel CPU inctruction sets expand with introduction of new
# CPUs), while -xY acts like "forced" use of instructions specific
# for the targeted CPU (which may result in code which cannot run on
# earlier CPUs.
#
# Switch -pc80 increases precision of floating point operation to
# 64 bits (vs. 53 bits double precision default).
#
# -qp  compiles and links for function profiling with  gprof(1);
#      this is the same as specifying -p or -pg.
#
# Option -Vaxlib within LDFLAGS enables proper resolution of "iargc"
# and "getarg" functions when using ifc 7.x and earlier compilers.
# Starting with release version 8.0, Intel compiler treats them as
# intrinsic procedures, so there is no need to specify this option. 



 OMP_FLAG = -fpp2 -openmp

#     CFT = ifc   $(OMP_FLAG) -pc80 -tpp7 -axW -xW
#     CFT = ifort $(OMP_FLAG) -pc80 -tpp7 -axN -xN -auto -stack_temps
      CFT = ifort $(OMP_FLAG) -pc80 -tpp7 -msse3 -align dcommon -auto -stack_temps
      CFT = ifort $(OMP_FLAG)

      LDR = $(CFT)

   FFLAGS = -O3 -IPF_fma -ip 
   FFLAGS = -O3 -arch pn3 
# -prof_gen
#    FFLAGS = -O0             #  -CA check pointer; -CS check shape
#
# Flag setting for debugging: note that -CA check pointer,
# and -CS check shape are not implemented in ifort8.1.xxx
# and should not be used.
#
#   FFLAGS = -g -CA -CB -CS -CU -CV 
#  LDFLAGS = -Vaxlib


 COMP_FILES = work.pc work.pcl ifc??????

   LCDF = -lnetcdf


 LIBNCAR = -L/usr/local/ncarg/lib -L/usr/X11R6/lib -lncarg -lncarg_gks -lncarg_c -lX11 -lm


