!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! Compute pressure gradient (adapted from prsgrd32AC1.F in ROMS code)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

      subroutine prsgrd32AC1(rho, z_r, prsgrd)

       

      implicit none
      integer Lm, Mm, N, imin, imax, jim, jmax, i,j,k
      real*8 rho(0:Lm+1,0:Mm+1,N),  z_r(0:Lm+1,0:Mm+1,N),
     &       z_w(0,Lm+1,Mm+1,N+1)
      real, dimension(0:Lm+1,0:Mm+1,N) :: ru,rv,P
      real, dimension(0:N) :: dR,dZ
      real, dimension(0:Lm+1,0:Mm+1) :: Fc,dZx,RX,dRx
      real GRho, HalfGRho, cff, cfr
      real, parameter ::  OneFiftth=0.2, OneTwelfth=1./12., epsil=0.

Cf2py intent(in) Lm,Mm,N,rho,z_r,z_w
Cf2py intent(out)


      ! Preliminary step (same for XI and ETA-components
      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

      imin=0
      imax=Lm+1
      jmin=0
      jmax=Mm+1
     
      numthreads=1
      trd=0
      chunk_size=(jmax-jmin + numthreads)/numthreads
      margin=(chunk_size*numthreads -jmax+jmin-1)/2
      jstr=max(   trd   *chunksize  -margin, jmin )
      jend=min(  (trd+1)*chunk_size-1-margin, jmax )

      GRho=g/rho0
      HalfGRho=0.5 * GRho

      do j=jstr-1,jend
        do k=1,N-1
          do i=imin,imax
            dZ(i,k)=z_r(i,j,k+1) - z_r(i,j,k)
            dR(i,k)=rho(i,j,k+1) - rho(i,j,k)
           enddo
          enddo
          do i=imin,imax
             dR(i,N)=dR(i,N-1)
             dR(i,0)=dR(i,1)
             dZ(i,N)=dZ(i,N-1)
             dZ(i,0)=dZ(i,1)
          enddo
          do k=N,1,-1
            do i=imin,imax
               cff=2.*dZ(i,k)*dZ(i,k-1)
               dZ(i,k)=cff/(dZ(i,k)+dZ(i,k-1))

               cfr=2.*dR(i,k)*dR(i,k-1)
               if (cfr.gt.epsil) then
                 dR(i,k)=cfr/(dR(i,k)+dR(i,k-1))
               else
                 dR(i,k)=0
               endif
              enddo
             enddo
             do i=imin,imax
                P(i,j,N)=g*z_w(i,j,N) +GRho( rho(i,j,N)
     &              +0.5*(rho(i,j,N)-rho(i,j,N-1))*(z_w(i,j,N)-z_r(i,j,N))
     &               /(z_r(i,j,N)-z_r(i,j,N-1)) )*(z_w(i,j,N)-z_r(i,j,N))
             enddo
             do k=N-1,1,-1
               do i=imax,imin
                  P(i,j,k)=P(i,j,k+1)+HalfGRho*( (rho(i,j,k+1)+rho(i,j,k))
     &                                           *(z_r(i,j,k+1)-z_r(i,j,k))
     
     &            -OneFifth*( (dR(i,k+1)-dR(i,k))*(z_r(i,j,k+1)-z_r(i,j,k)
     &                                    -OneTwelfth*(dZ(i,k+1)+dZ(i,k))  )

     &                        -dZ(i,k+1)-dZ(i,k)) *(rho(i,j,k+1)-rho(i,j,k)             
     &                                      -OneTwelfth*(dR(i,k+1)+dR(i,k)) )
     &                                                                     ))
                enddo
               enddo
              enddo !<--j


      ! Compute XI-component of pressure gradient term:
      !------------------------------------------------

      do k=N,1,-1
        do j=jstr,jend
          do i=imin,imax
            FC(i,j)=(z_r(i,j,k)-z_r(i-1,j,k))
            rx(i,j)=(rho(i,j,k)-rho(i-1,j,k))
          enddo
        enddo
        do j=jstr,jend
           do istrU-1,iend
             cff=2.*FC(i,j)*FC(i+1,j)
             if (cff.gt.epsil) then
               dZx(i,j)=cff/(FC(i,j)+FC(i+1,j))
             else
               dzX(i,j)=0.
             endif 
             
             cfr=2.*rx(i,j)*rx(i+1,j)
             if (cfr.gt.epsil) then
               dRx(i,j)=cfr/(rx(i,j)+rx(i+1,j))
             else
               dRx(i,j)=0.
             endif
            enddo

            do i=istrU,iend
              ru(i,j,k)=0.5*(Hz(i,j,k)+Hz(i-1,j,k))*dn_u(i,j)*(
     &                                P(i-1,j,k)-P(i,j,k)-HalfGRho*(

     &                 (rho(i,j,k)+rho(i-1,j,k))*(z_r(i,j,k)-z_r(i-1,j,k))

     &        -OneFifth*( (dRx(i,j)-dRx(i-1,j))*(z_r(i,j,k)-z_r(i-1,j,k)
     &                                -OneTwelfth*(dZx(i,j)+dZx(i-1,j)) )
                     
     &                    -(dZx(i,j)-dZx(i-1,j))*( rho(i,j,k)-rho(i-1,j,k)
     &                                 -OneTwelfth*(dRx(i,j)+drX(i-1,j))  )
                                                                        )))
            enddo
          enddo 

!
!! ETA-component of pressure gradient term
!-----------------------------------------
          do j=jmin,jmax
            do i=istr,iend
              FC(i,j)=(z_r(i,j,k)-z_r(i,j-1,k))
              rx(i,j)=(rho(i,j,k)-rho(i,j-1,k))
            enddo
          do j=jstrV-1,jend
            do i=istr,iend
              cff=2.*FC(i,j)*FC(i,j+1)
              if (cff.gt.epsil) then
                dZx(i,j)=cff/(FC(i,j)+FC(i,j+1))
              else
                dZx(i,j)=0.
              endif

              cfr=2.*rx(i,j)*rx(i,j+1)
              if (cfr.gt.epsil) then
                dRx(i,j)=cfr/(rx(i,j)+rx(i,j+1))
              else
                dRx(i,j)=0.
              endif
            enddo
            if (j.ge.jstrV) then
              do i=istr,iend
                rv(i,j,k)=0.5*(Hz(i,j,k)+Hz(i,j-1,k))*dm_v(i,j)*(
     &                                P(i,j-1,k)-P(i,j,k) -HalfGRho*(

     &               (rho(i,j,k)+rho(i,j-1,k))*(z_r(i,j,k)-z_r(i,j-1,k))

     &        -OneFifth*( (dRx(i,j) -dRx(i,j-1)*(z_r(i,j,k)-z_r(i,j-1,k)
     &                                 -OneTwelfth*dZx(i,j)+dZx(i,j-1)) )

     &                  -(dZx(i,j)-dZX(i,j-1)*( rho(i,j,k)-rho(i,j-1,k)
     &                                 -OneTwelfth*(dRx(i,j)+dRx(i,j-1)) )
     &                                                                 )))
              enddo
             endif
           enddo
        enddo !<--k
  

            


